1. Put your TicketingDS.java and other related files in the ticketingsystem directory.

2. The TrainConfig file contains the configuration of a Train Ticketing System.

3. The history.sh calls GenerateHistory to generate a finite history of size threadNum * testNum, i.e., with threadNum threads and testNum operations per thread. The parameters for GenerateHistory are threadNum, testNum, isSequential, msec and nsec. 
   * isSequential=1 for a sequential execution, and 0 for a concurrent one
   * msec and nsec are the milli- and nano-seconds of a delay, e.g., msec=1 and nsec=0 for delay 1ms 

4. The verilin.sh calls VeriLin.jar for linearizability checking. The parameters for VeriLin are threadNum, historyFile, isPosttime and outputFile.
   * historyFile is generated by GenerateHistory, possibly out of order even for a sequential execution
   * isPosttime=1 for post-time sorting, and 0 for pre-time sorting
   * outputFile is a maximal linearizable history prefix

5. The replay.sh calls Replay to check if a sequential or sequentialized history is correct.

1. 将TicketingDS.java和其他相关文件放到ticketingsystem目录中。

2. TrainConfig文件包含Train Ticketing System的配置。

3.history.sh调用GenerateHistory来生成一个有限的历史，大小为threadNum * testNum，即每个线程使用threadNum线程和testNum操作。GenerateHistory的参数为threadNum、testNum、isSequential、msec和nsec。

* issequence =1表示顺序执行，0表示并发执行

* msec和nsec是延迟的毫微秒和纳秒，例如延迟1ms时msec=1和nsec=0

4. verilin.sh调用VeriLin.jar进行线性性检查。VeriLin的参数有threadNum、historyFile、isPosttime和outputFile。

* historyFile是由GenerateHistory生成的，即使是顺序执行，也可能是无序的

* isPosttime=1用于后时间排序，0用于前时间排序

outputFile是一个最大线性历史前缀

5.  replay.sh调用Replay来检查顺序或顺序化的历史是否正确。
